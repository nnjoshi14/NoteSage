name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security_events: write

jobs:
  test-server:
    name: Test Go Server
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: notesage_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./server
      run: go mod download

    - name: Run tests
      working-directory: ./server
      env:
        DB_TYPE: postgres
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: notesage_test
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_SSL_MODE: disable
        JWT_SECRET: test-secret
      run: go test -race -v -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./server/coverage.out
        flags: server

  test-desktop-client:
    name: Test Desktop Client
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop-client/package-lock.json

    - name: Install dependencies
      working-directory: ./desktop-client
      run: npm install

    - name: Run linter
      working-directory: ./desktop-client
      run: npm run lint

    - name: Run tests
      working-directory: ./desktop-client
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./desktop-client/coverage/lcov.info
        flags: desktop-client

  build-server:
    name: Build Server
    runs-on: ubuntu-latest
    needs: test-server

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Build for all platforms
      working-directory: ./server
      run: |
        GOOS=linux GOARCH=amd64 go build -o bin/notesage-server-linux-amd64 .
        GOOS=linux GOARCH=arm64 go build -o bin/notesage-server-linux-arm64 .
        GOOS=darwin GOARCH=amd64 go build -o bin/notesage-server-darwin-amd64 .
        GOOS=darwin GOARCH=arm64 go build -o bin/notesage-server-darwin-arm64 .
        GOOS=windows GOARCH=amd64 go build -o bin/notesage-server-windows-amd64.exe .

    - name: Upload server artifacts
      uses: actions/upload-artifact@v3
      with:
        name: server-binaries
        path: server/bin/

  build-desktop-client:
    name: Build Desktop Client
    runs-on: ${{ matrix.os }}
    needs: test-desktop-client
    
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop-client/package-lock.json

    - name: Install dependencies
      working-directory: ./desktop-client
      run: npm install

    - name: Build application
      working-directory: ./desktop-client
      run: npm run build

    - name: Build distributables (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: ./desktop-client
      run: npm run dist:linux

    - name: Build distributables (macOS)
      if: matrix.os == 'macos-latest'
      working-directory: ./desktop-client
      run: npm run dist:mac

    - name: Build distributables (Windows)
      if: matrix.os == 'windows-latest'
      working-directory: ./desktop-client
      run: npm run dist:win

    - name: Upload desktop artifacts
      uses: actions/upload-artifact@v3
      with:
        name: desktop-client-${{ matrix.os }}
        path: desktop-client/release/

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-server, build-desktop-client]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
    - uses: actions/checkout@v4

    - name: Download server artifacts
      uses: actions/download-artifact@v3
      with:
        name: server-binaries
        path: ./release/server/

    - name: Download desktop client artifacts (Ubuntu)
      uses: actions/download-artifact@v3
      with:
        name: desktop-client-ubuntu-latest
        path: ./release/desktop-ubuntu/

    - name: Download desktop client artifacts (macOS)
      uses: actions/download-artifact@v3
      with:
        name: desktop-client-macos-latest
        path: ./release/desktop-macos/
        
    - name: Download desktop client artifacts (Windows)
      uses: actions/download-artifact@v3
      with:
        name: desktop-client-windows-latest
        path: ./release/desktop-windows/

    - name: Generate release tag
      id: tag
      run: |
        echo "tag=v$(date +'%Y.%m.%d')-$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: Release ${{ steps.tag.outputs.tag }}
        draft: false
        prerelease: false
        files: |
          release/server/*
          release/desktop-ubuntu/*
          release/desktop-macos/*
          release/desktop-windows/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}