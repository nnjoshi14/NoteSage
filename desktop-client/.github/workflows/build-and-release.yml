name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest]
        include:
          - os: macos-latest
            platform: darwin
            arch: x64
          - os: ubuntu-latest
            platform: linux
            arch: x64

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop-client/package-lock.json

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libnss3-dev libatk-bridge2.0-dev libdrm2 libxkbcommon0 libgtk-3-0

    - name: Install dependencies
      working-directory: desktop-client
      run: npm ci

    - name: Run tests
      working-directory: desktop-client
      run: npm test -- --run

    - name: Run linting
      working-directory: desktop-client
      run: npm run lint

    - name: Build application
      working-directory: desktop-client
      run: npm run build

    - name: Build installers (macOS)
      if: matrix.os == 'macos-latest'
      working-directory: desktop-client
      env:
        APPLE_ID: ${{ secrets.APPLE_ID }}
        APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
        APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        CSC_LINK: ${{ secrets.CSC_LINK }}
        CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
      run: npm run dist:mac

    - name: Build installers (Linux)
      if: matrix.os == 'ubuntu-latest'
      working-directory: desktop-client
      run: npm run dist:linux

    - name: Test installers
      working-directory: desktop-client
      run: npm run test:installer

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: installers-${{ matrix.platform }}-${{ matrix.arch }}
        path: |
          desktop-client/release/*.dmg
          desktop-client/release/*.zip
          desktop-client/release/*.deb
          desktop-client/release/*.AppImage
          desktop-client/release/*.tar.gz
          desktop-client/release/checksums.json
          desktop-client/release/build-report.json
          desktop-client/release/installer-test-report.json
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        find artifacts -type f \( -name "*.dmg" -o -name "*.zip" -o -name "*.deb" -o -name "*.AppImage" -o -name "*.tar.gz" \) -exec cp {} release-assets/ \;
        find artifacts -name "checksums.json" -exec cp {} release-assets/ \;
        find artifacts -name "RELEASE_NOTES.md" -exec cp {} release-assets/ \; || echo "No release notes found"

    - name: Generate release notes
      id: release_notes
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        if [ -f "release-assets/RELEASE_NOTES.md" ]; then
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release-assets/RELEASE_NOTES.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "RELEASE_NOTES=Release $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: NoteSage Desktop ${{ steps.release_notes.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: release-assets/*
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') || contains(github.ref, 'rc') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update latest release
      if: "!contains(github.ref, 'beta') && !contains(github.ref, 'alpha') && !contains(github.ref, 'rc')"
      uses: softprops/action-gh-release@v1
      with:
        name: NoteSage Desktop ${{ steps.release_notes.outputs.VERSION }}
        body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
        files: release-assets/*
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  security-scan:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: desktop-client/package-lock.json

    - name: Install dependencies
      working-directory: desktop-client
      run: npm ci

    - name: Run security audit
      working-directory: desktop-client
      run: npm audit --audit-level=moderate

    - name: Check for known vulnerabilities
      working-directory: desktop-client
      run: npx audit-ci --moderate

  notify:
    runs-on: ubuntu-latest
    needs: [build, release]
    if: always()

    steps:
    - name: Notify build status
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
      run: |
        if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.release.result }}" == "success" ]; then
          echo "✅ Release build completed successfully!"
        else
          echo "❌ Release build failed!"
          exit 1
        fi